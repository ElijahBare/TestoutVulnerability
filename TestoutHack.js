/**
 * Ripped Code From TestOut. Used for encryption and decompression
 */

function e(e, t) {
    if (!o[e]) {
        o[e] = {};
        for (var n = 0; n < e.length; n++)
            o[e][e.charAt(n)] = n
    }
    return o[e][t]
}

var t = String.fromCharCode
    , n = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/="
    , r = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+-$"
    , o = {}
    , a = {
    compressToBase64: function (e) {
        if (null == e)
            return "";
        var t = a._compress(e, 6, (function (e) {
                return n.charAt(e)
            }
        ));
        switch (t.length % 4) {
            default:
            case 0:
                return t;
            case 1:
                return t + "===";
            case 2:
                return t + "==";
            case 3:
                return t + "="
        }
    },
    decompressFromBase64: function (t) {
        return null == t ? "" : "" == t ? null : a._decompress(t.length, 32, (function (r) {
                return e(n, t.charAt(r))
            }
        ))
    },
    compressToUTF16: function (e) {
        return null == e ? "" : a._compress(e, 15, (function (e) {
                return t(e + 32)
            }
        )) + " "
    },
    decompressFromUTF16: function (e) {
        return null == e ? "" : "" == e ? null : a._decompress(e.length, 16384, (function (t) {
                return e.charCodeAt(t) - 32
            }
        ))
    },
    compressToUint8Array: function (e) {
        for (var t = a.compress(e), n = new Uint8Array(2 * t.length), r = 0, o = t.length; o > r; r++) {
            var i = t.charCodeAt(r);
            n[2 * r] = i >>> 8,
                n[2 * r + 1] = i % 256
        }
        return n
    },
    decompressFromUint8Array: function (e) {
        if (null == e)
            return a.decompress(e);
        for (var n = new Array(e.length / 2), r = 0, o = n.length; o > r; r++)
            n[r] = 256 * e[2 * r] + e[2 * r + 1];
        var i = [];
        return n.forEach((function (e) {
                i.push(t(e))
            }
        )),
            a.decompress(i.join(""))
    },
    compressToEncodedURIComponent: function (e) {
        return null == e ? "" : a._compress(e, 6, (function (e) {
                return r.charAt(e)
            }
        ))
    },
    decompressFromEncodedURIComponent: function (t) {
        return null == t ? "" : "" == t ? null : (t = t.replace(/ /g, "+"),
            a._decompress(t.length, 32, (function (n) {
                    return e(r, t.charAt(n))
                }
            )))
    },
    compress: function (e) {
        return a._compress(e, 16, (function (e) {
                return t(e)
            }
        ))
    },
    _compress: function (e, t, n) {
        if (null == e)
            return "";
        var r, o, a, i = {}, s = {}, l = "", c = "", u = "", d = 2, p = 3, m = 2, h = [], f = 0, g = 0;
        for (a = 0; a < e.length; a += 1)
            if (l = e.charAt(a),
            Object.prototype.hasOwnProperty.call(i, l) || (i[l] = p++,
                s[l] = !0),
                c = u + l,
                Object.prototype.hasOwnProperty.call(i, c))
                u = c;
            else {
                if (Object.prototype.hasOwnProperty.call(s, u)) {
                    if (u.charCodeAt(0) < 256) {
                        for (r = 0; m > r; r++)
                            f <<= 1,
                                g == t - 1 ? (g = 0,
                                    h.push(n(f)),
                                    f = 0) : g++;
                        for (o = u.charCodeAt(0),
                                 r = 0; 8 > r; r++)
                            f = f << 1 | 1 & o,
                                g == t - 1 ? (g = 0,
                                    h.push(n(f)),
                                    f = 0) : g++,
                                o >>= 1
                    } else {
                        for (o = 1,
                                 r = 0; m > r; r++)
                            f = f << 1 | o,
                                g == t - 1 ? (g = 0,
                                    h.push(n(f)),
                                    f = 0) : g++,
                                o = 0;
                        for (o = u.charCodeAt(0),
                                 r = 0; 16 > r; r++)
                            f = f << 1 | 1 & o,
                                g == t - 1 ? (g = 0,
                                    h.push(n(f)),
                                    f = 0) : g++,
                                o >>= 1
                    }
                    0 == --d && (d = Math.pow(2, m),
                        m++),
                        delete s[u]
                } else
                    for (o = i[u],
                             r = 0; m > r; r++)
                        f = f << 1 | 1 & o,
                            g == t - 1 ? (g = 0,
                                h.push(n(f)),
                                f = 0) : g++,
                            o >>= 1;
                0 == --d && (d = Math.pow(2, m),
                    m++),
                    i[c] = p++,
                    u = String(l)
            }
        if ("" !== u) {
            if (Object.prototype.hasOwnProperty.call(s, u)) {
                if (u.charCodeAt(0) < 256) {
                    for (r = 0; m > r; r++)
                        f <<= 1,
                            g == t - 1 ? (g = 0,
                                h.push(n(f)),
                                f = 0) : g++;
                    for (o = u.charCodeAt(0),
                             r = 0; 8 > r; r++)
                        f = f << 1 | 1 & o,
                            g == t - 1 ? (g = 0,
                                h.push(n(f)),
                                f = 0) : g++,
                            o >>= 1
                } else {
                    for (o = 1,
                             r = 0; m > r; r++)
                        f = f << 1 | o,
                            g == t - 1 ? (g = 0,
                                h.push(n(f)),
                                f = 0) : g++,
                            o = 0;
                    for (o = u.charCodeAt(0),
                             r = 0; 16 > r; r++)
                        f = f << 1 | 1 & o,
                            g == t - 1 ? (g = 0,
                                h.push(n(f)),
                                f = 0) : g++,
                            o >>= 1
                }
                0 == --d && (d = Math.pow(2, m),
                    m++),
                    delete s[u]
            } else
                for (o = i[u],
                         r = 0; m > r; r++)
                    f = f << 1 | 1 & o,
                        g == t - 1 ? (g = 0,
                            h.push(n(f)),
                            f = 0) : g++,
                        o >>= 1;
            0 == --d && (d = Math.pow(2, m),
                m++)
        }
        for (o = 2,
                 r = 0; m > r; r++)
            f = f << 1 | 1 & o,
                g == t - 1 ? (g = 0,
                    h.push(n(f)),
                    f = 0) : g++,
                o >>= 1;
        for (; ;) {
            if (f <<= 1,
            g == t - 1) {
                h.push(n(f));
                break
            }
            g++
        }
        return h.join("")
    },
    decompress: function (e) {
        return null == e ? "" : "" == e ? null : a._decompress(e.length, 32768, (function (t) {
                return e.charCodeAt(t)
            }
        ))
    },
    _decompress: function (e, n, r) {
        var o, a, i, s, l, c, u, d = [], p = 4, m = 4, h = 3, f = "", g = [], v = {
            val: r(0),
            position: n,
            index: 1
        };
        for (o = 0; 3 > o; o += 1)
            d[o] = o;
        for (i = 0,
                 l = Math.pow(2, 2),
                 c = 1; c != l;)
            s = v.val & v.position,
                v.position >>= 1,
            0 == v.position && (v.position = n,
                v.val = r(v.index++)),
                i |= (s > 0 ? 1 : 0) * c,
                c <<= 1;
        switch (i) {
            case 0:
                for (i = 0,
                         l = Math.pow(2, 8),
                         c = 1; c != l;)
                    s = v.val & v.position,
                        v.position >>= 1,
                    0 == v.position && (v.position = n,
                        v.val = r(v.index++)),
                        i |= (s > 0 ? 1 : 0) * c,
                        c <<= 1;
                u = t(i);
                break;
            case 1:
                for (i = 0,
                         l = Math.pow(2, 16),
                         c = 1; c != l;)
                    s = v.val & v.position,
                        v.position >>= 1,
                    0 == v.position && (v.position = n,
                        v.val = r(v.index++)),
                        i |= (s > 0 ? 1 : 0) * c,
                        c <<= 1;
                u = t(i);
                break;
            case 2:
                return ""
        }
        for (d[3] = u,
                 a = u,
                 g.push(u); ;) {
            if (v.index > e)
                return "";
            for (i = 0,
                     l = Math.pow(2, h),
                     c = 1; c != l;)
                s = v.val & v.position,
                    v.position >>= 1,
                0 == v.position && (v.position = n,
                    v.val = r(v.index++)),
                    i |= (s > 0 ? 1 : 0) * c,
                    c <<= 1;
            switch (u = i) {
                case 0:
                    for (i = 0,
                             l = Math.pow(2, 8),
                             c = 1; c != l;)
                        s = v.val & v.position,
                            v.position >>= 1,
                        0 == v.position && (v.position = n,
                            v.val = r(v.index++)),
                            i |= (s > 0 ? 1 : 0) * c,
                            c <<= 1;
                    d[m++] = t(i),
                        u = m - 1,
                        p--;
                    break;
                case 1:
                    for (i = 0,
                             l = Math.pow(2, 16),
                             c = 1; c != l;)
                        s = v.val & v.position,
                            v.position >>= 1,
                        0 == v.position && (v.position = n,
                            v.val = r(v.index++)),
                            i |= (s > 0 ? 1 : 0) * c,
                            c <<= 1;
                    d[m++] = t(i),
                        u = m - 1,
                        p--;
                    break;
                case 2:
                    return g.join("")
            }
            if (0 == p && (p = Math.pow(2, h),
                h++),
                d[u])
                f = d[u];
            else {
                if (u !== m)
                    return null;
                f = a + a.charAt(0)
            }
            g.push(f),
                d[m++] = a + f.charAt(0),
                a = f,
            0 == --p && (p = Math.pow(2, h),
                h++)
        }
    }
}

t.CompressedStrings = class {
    static compress(e) {
        return a.compressToEncodedURIComponent(e).replace(/\+/g, "_plus_")
    }

    static decompress(e) {
        return e = e.replace(/_plus_/g, "+"),
            a.decompressFromEncodedURIComponent(e)
    }
}

/**
 *
 *
 * @param compressedString String to modify and return
 * @param missed_offset Offset for score to make it more believable (measured in ratio points NOT %)
 */

function spoof(compressedString, missed_offset) {
    // Decode the compressed string
    const decodedString = t.CompressedStrings.decompress(compressedString);

    // Parse the JSON string
    const parsedJson = JSON.parse(decodedString);

    console.log("before:")
    console.log(parsedJson)

    // Set the specified point value
    parsedJson.pointsScored = parsedJson.pointsPossible - missed_offset;

    //you are passing now!
    parsedJson.passed = true;

    console.log("\n \n setting point score to " + parsedJson.pointsScored + " " + "out of " + parsedJson.pointsPossible + "");

    //reasonable time based of # of questions
    parsedJson.secondsInResource = Math.round(parsedJson.pointsPossible + Math.random() + 8) * 16;

    console.log("\n \n setting time took to " + parsedJson.secondsInResource + " " + "With " + parsedJson.pointsPossible + " questions");

    console.log("\n \n After:")
    console.log(parsedJson)

    // Convert the parsed JSON object to a string
    const parsedString = JSON.stringify(parsedJson);

    // Print the parsed string
    console.log("Encrypted data with said values: \n \n ")
    console.log(t.CompressedStrings.compress(parsedString));
}

console.log("\n\n\n\n");

spoof("", 0);
